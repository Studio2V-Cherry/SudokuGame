# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master
- dev
- dev_*

pool:
  vmImage: ubuntu-latest

variables:
  - group: CI-pipeline-Variables


steps:
- script: echo Hello, world!
- script: echo $(DotNetVersion)
  displayName: 'command line statements'

- task: PowerShell@2
  displayName: 'Version setup'
  inputs:
    targetType: 'inline'
    script: |
      # Write your PowerShell commands here.
      $major=$(MAJOR)
      $minor=$(MINOR) -as [int]
      $patch=$(PATCH)
      $prerelease=$(PRE_RELEASE)

      $minor = $minor+1        
      Write-Host "Current-Version :$major.$(MINOR).$patch.$prerelease"

      Write-Host "Next Version would be : $major.$minor.$patch.$prerelease"
      
      $url="https://dev.azure.com/CherryMeAi/Maui%20App%20Suduko/_apis/distributedtask/variablegroups/3?api-version=6.0"
      $puturl="https://dev.azure.com/CherryMeAi/_apis/distributedtask/variablegroups/3?&api-version=6.0"

      $WebClient = New-Object System.Net.WebClient
      
      #key value
      $key_variable_name="MINOR"
      
      # Set Authorization HTTP header with Basic authentication information.
      $webclient.Headers["Authorization"] = "Bearer  $(System.AccessToken)"
      
      Write-Host "Bearer  $(System.AccessToken)"

      $json= $WebClient.DownloadString($url)

      $jsonString = $json | ConvertFrom-Json

      Write-Host "Get JSON - $jsonString"
      
      $versionNumber = $jsonString.variables.$key_variable_name.value
      
      Write-Host "Get Version = $versionNumber"
      
      $jsonString.variables.$key_variable_name.value= $minor
      $json= $jsonString | ConvertTo-Json -Depth 100 -Compress
      
      Write-Host "$json"
      $pipeline = Invoke-RestMethod -Uri $puturl -Method Put -Body $json -ContentType "application/json" -Headers @{Authorization=("Bearer $(System.AccessToken)")}

      Write-Host "$pipeline"
      #$authHeader = @{Authorization = "Bearer $(System.AccessToken))"}
      #Invoke-RestMethod -Method Put -Uri $puturl -Headers $authHeader -ContentType "application/json" -Body ([System.Text.Encoding]::UTF8.GetBytes($json)) | Out-Null
      
      $json= $WebClient.DownloadString($url)
      
      $jsonString = $json | ConvertFrom-Json

      Write-Host "Get JSON - $jsonString"
      
      $versionNumber = $jsonString.variables.$key_variable_name.value
      
      Write-Host "Updated to Version counter - $versionNumber"

    failOnStderr: true
    showWarnings: true



- task: DownloadSecureFile@1
  inputs:
    secureFile: 'sudokucherry.keystore'
    retryCount: '2'

- task: DownloadSecureFile@1
  inputs:
    secureFile: 'azure.cherry.play'

- task: UseDotNet@2
  displayName: .NET Version
  inputs:
    packageType: 'sdk'
    version: '$(DotNetVersion)'
    includePreviewVersions: false

# - task: JavaToolInstaller@3
#   displayName: Install Java SDK
#   inputs:
#     versionSpec: '1'
#     jdkArchitectureOption: 'x64'
#     jdkSourceOption: 'PreInstalled'

# - task: CmdLine@2
#   displayName: Install MAUI
#   inputs:
#     script: |
#       Dotnet workload install maui-android maui-ios

# - task: Bash@3
#   displayName: Build Android App
#   inputs:
#     targetType: 'inline'
#     script: |
#       cd 6.0/Apps/WeatherTwentyOne/src
#       dotnet publish -f net6.0-android -c Release

- powershell: dotnet workload install maui-android
  displayName: Maui workload setup
  

- task: CmdLine@2
  displayName: 'Build project'
  inputs:
    script: 'dotnet publish $(app-path-project) -f $(app-target-framework-android) -c Release /p:ApplicationId=$(app-id-android) /p:ApplicationDisplayVersion=$(MAJOR).$(MINOR).$(PATCH).$(PRE_RELEASE) /p:ApplicationVersion=$(MAJOR)$(MINOR)$(PATCH)$(PRE_RELEASE)'


- task: AndroidSigning@3
  inputs:
    apkFiles: '**/*.apk'
    apksignerKeystoreFile: 'sudokucherry.keystore'
    apksignerKeystorePassword: 'sudokucherry123'
    apksignerKeystoreAlias: 'sudokucherry'
    apksignerKeyPassword: 'sudokucherry123'
    zipalign: false

# - script: echo file paths
# - script: echo working directory $(system.defaultworkingdirectory)/bin/**
# - script: echo staging directory $(build.artifactstagingdirectory)/**
# - script: echo $(app-path-contents)/$(app-build-configuration)/$(app-target-framework-android)/publish/bin/**
#   displayName: 'show paths'


- task: CopyFiles@2
  displayName: 'copy secure files to artifact'
  inputs:
    SourceFolder: '$(Agent.TempDirectory)'
    Contents: 'azure.cherry.play'
    TargetFolder: '$(build.artifactstagingdirectory)'
    CleanTargetFolder: true

- task: CopyFiles@2
  displayName: 'Copy files to $(build.artifactstagingdirectory)'
  inputs:
    SourceFolder: '$(system.defaultworkingdirectory)'
    Contents: '**/bin/**'
    TargetFolder: '$(build.artifactstagingdirectory)'
    CleanTargetFolder: true

# Publish artifacts
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifacts'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'
    ArtifactName: 'drop_maui_android'
    publishLocation: 'Container'  